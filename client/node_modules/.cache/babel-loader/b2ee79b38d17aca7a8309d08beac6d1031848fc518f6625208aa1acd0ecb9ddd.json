{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import Navbar from './Navbar';\n// import Sos from './Sos';\n// import axios from 'axios';\n// import L from 'leaflet';\n// import 'leaflet-routing-machine';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// const MapComponent = () => {\n//     const mapRef = useRef(null);\n//     const [data, setData] = useState({});\n//     const [error, setError] = useState(null);\n//     const [sourceCoordinates, setSourceCoordinates] = useState(null);\n//     const [destinationCoordinates, setDestinationCoordinates] = useState(null);\n//     const [userIconMarker, setUserIconMarker] = useState(null);\n//     const [routingControl, setRoutingControl] = useState(null); \n//     const [isNavigated, setIsNavigated] = useState(false); \n//     const navigate = useNavigate();\n//     const location = useLocation();\n\n//     const fetchData = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:5000/auth/viewtripbyid', { id: location.state.id });\n//             setData(response.data);\n\n//             if (response.data.sourceStation && response.data.destinationStation) {\n//                 const sourceResult = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${response.data.sourceStation}`);\n//                 const destinationResult = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${response.data.destinationStation}`);\n//                 if (sourceResult.data.length > 0 && destinationResult.data.length > 0) {\n//                     setSourceCoordinates([parseFloat(sourceResult.data[0].lat), parseFloat(sourceResult.data[0].lon)]);\n//                     setDestinationCoordinates([parseFloat(destinationResult.data[0].lat), parseFloat(destinationResult.data[0].lon)]);\n//                 } else {\n//                     setError(\"Source or destination coordinates not found\");\n//                 }\n//             }\n//         } catch (error) {\n//             setError(error.message);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchData();\n//     }, [location.state.id]);\n\n//     useEffect(() => {\n//         if (sourceCoordinates && destinationCoordinates) {\n//             if (!mapRef.current) {\n//                 mapRef.current = L.map('map').setView(sourceCoordinates, 11);\n//                 const mapLink = \"<a href='http://openstreetmap.org'>OpenStreetMap</a>\";\n//                 L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n//                     attribution: 'Leaflet &copy; ' + mapLink + ', contribution',\n//                     maxZoom: 18\n//                 }).addTo(mapRef.current);\n//             }\n\n//             const map = mapRef.current;\n\n//             // Add polyline to show shortest road between source and destination\n//             const control = L.Routing.control({\n//                 waypoints: [\n//                     L.latLng(sourceCoordinates),\n//                     L.latLng(destinationCoordinates)\n//                 ],\n//                 routeWhileDragging: true,\n//                 lineOptions: {\n//                     styles: [{ color: 'red', opacity: 0.7, weight: 5 }]\n//                 },\n//                 createMarker: function () { return null; }\n//             });\n//             setRoutingControl(control.addTo(map));\n\n//             // Add marker for source and destination\n//             L.marker(sourceCoordinates).addTo(map)\n//                 .bindPopup(`<b>Source:</b> ${data.sourceStation}`);\n\n//             L.marker(destinationCoordinates).addTo(map)\n//                 .bindPopup(`<b>Destination:</b> ${data.destinationStation}`);\n\n//             // Initialize user icon marker\n//             const userIcon = L.icon({\n//                 iconUrl: data.photo,\n//                 iconSize: [40, 40],\n//             });\n//             setUserIconMarker(L.marker(sourceCoordinates, { icon: userIcon }).addTo(map));\n\n//             map.fitBounds([sourceCoordinates, destinationCoordinates]);\n//         }\n//     }, [sourceCoordinates, destinationCoordinates]);\n\n//     useEffect(() => {\n//         if (userIconMarker && routingControl ) {\n//             // Animate user icon marker along the route\n//             routingControl.on('routesfound', function (e) {\n//                 const route = e.routes[0];\n//                 const index = 0;\n//                 const segment = route.coordinates[index];\n//                 moveMarker(segment, index + 1, route);\n//             });\n//         }\n//     }, [userIconMarker, routingControl, sourceCoordinates, destinationCoordinates, ]);\n\n//     const displayCoordinates = async () => {\n// if (userIconMarker) {\n//     const coordinates = userIconMarker.getLatLng();\n//     const response = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${coordinates.lat}&lon=${coordinates.lng}`);\n//     const placeInfo = response.data.address;\n//     const stateDistrict = placeInfo.state_district;\n\n//     try {\n//         const userId = data._id;\n//         await axios.post('http://localhost:5000/auth/submitalert', {\n//             userId: userId,\n//             coordinates: {\n//                 stateDistrict: stateDistrict \n//             },\n\n//         });\n//     } catch (error) {\n//         console.error('Error saving SOS request:', error);\n//     }\n// \tsetIsNavigated(true);\n//     alert(`You are in ${stateDistrict}. Help will arrive in a few minutes.`);\n//     navigate('/userhelp', { state: { data } });\n\n// }\n//     };\n\n// \tlet destinationReached = false; \n\n//     async function moveMarker(segment, index, route) {\n//         setTimeout(async function () {\n//             if (!isNavigated) {\n//                 userIconMarker.setLatLng(L.latLng(segment.lat, segment.lng));\n//                 if (index < route.coordinates.length) {\n//                     moveMarker(route.coordinates[index], index + 1, route);\n//                 } else {\n//                     try {\n// \t\t\t\t\t\tif (!destinationReached) {\n// \t\t\t\t\t\t\ttoast.success(\"You have reached the destination successfully!\", {\n// \t\t\t\t\t\t\t\ttoastId: 'destinationToast',\n// \t\t\t\t\t\t\t\tonClose: async () => {\n// \t\t\t\t\t\t\t\t\tdestinationReached = true;\n// \t\t\t\t\t\t\t\t\ttry {\n// \t\t\t\t\t\t\t\t\t\tconst userId = data._id;\n// \t\t\t\t\t\t\t\t\t\tawait axios.post('http://localhost:5000/auth/submitstatus', {\n// \t\t\t\t\t\t\t\t\t\t\tuserId: userId,\n// \t\t\t\t\t\t\t\t\t\t\ttripStatus: 1\n// \t\t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t\t\t\tconsole.log(\"Navigating to '/userhistory'...\");\n// \t\t\t\t\t\t\t\t\t\tnavigate('/userhistory');\n// \t\t\t\t\t\t\t\t\t} catch (error) {\n// \t\t\t\t\t\t\t\t\t\tconsole.error(error);\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\tdestinationReached = true;\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t});\n// \t\t\t\t\t\t}\n//                     } catch (error) {\n//                         console.error(error);\n//                     }                \n//                 }\n//             }\n//         }, 2); \n//     }\n\n//     return (\n//         <>\n//             <Navbar />\n//             <div>\n//                 {error ? (\n//                     <div>Error: {error}</div>\n//                 ) : (\n//                     <div id=\"map\" style={{ width: '100%', height: '100vh' }}></div>\n//                 )}\n//             </div>\n//             <Sos displayCoordinates={displayCoordinates} />\n//             <ToastContainer />\n//         </>\n//     );\n// }\n\n// export default MapComponent;","map":{"version":3,"names":[],"sources":["D:/SecureExplorer/client/src/user/MapComponent.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import Navbar from './Navbar';\r\n// import Sos from './Sos';\r\n// import axios from 'axios';\r\n// import L from 'leaflet';\r\n// import 'leaflet-routing-machine';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// const MapComponent = () => {\r\n//     const mapRef = useRef(null);\r\n//     const [data, setData] = useState({});\r\n//     const [error, setError] = useState(null);\r\n//     const [sourceCoordinates, setSourceCoordinates] = useState(null);\r\n//     const [destinationCoordinates, setDestinationCoordinates] = useState(null);\r\n//     const [userIconMarker, setUserIconMarker] = useState(null);\r\n//     const [routingControl, setRoutingControl] = useState(null); \r\n//     const [isNavigated, setIsNavigated] = useState(false); \r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n\r\n//     const fetchData = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:5000/auth/viewtripbyid', { id: location.state.id });\r\n//             setData(response.data);\r\n\r\n//             if (response.data.sourceStation && response.data.destinationStation) {\r\n//                 const sourceResult = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${response.data.sourceStation}`);\r\n//                 const destinationResult = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${response.data.destinationStation}`);\r\n//                 if (sourceResult.data.length > 0 && destinationResult.data.length > 0) {\r\n//                     setSourceCoordinates([parseFloat(sourceResult.data[0].lat), parseFloat(sourceResult.data[0].lon)]);\r\n//                     setDestinationCoordinates([parseFloat(destinationResult.data[0].lat), parseFloat(destinationResult.data[0].lon)]);\r\n//                 } else {\r\n//                     setError(\"Source or destination coordinates not found\");\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             setError(error.message);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         fetchData();\r\n//     }, [location.state.id]);\r\n\r\n//     useEffect(() => {\r\n//         if (sourceCoordinates && destinationCoordinates) {\r\n//             if (!mapRef.current) {\r\n//                 mapRef.current = L.map('map').setView(sourceCoordinates, 11);\r\n//                 const mapLink = \"<a href='http://openstreetmap.org'>OpenStreetMap</a>\";\r\n//                 L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\r\n//                     attribution: 'Leaflet &copy; ' + mapLink + ', contribution',\r\n//                     maxZoom: 18\r\n//                 }).addTo(mapRef.current);\r\n//             }\r\n\r\n//             const map = mapRef.current;\r\n\r\n//             // Add polyline to show shortest road between source and destination\r\n//             const control = L.Routing.control({\r\n//                 waypoints: [\r\n//                     L.latLng(sourceCoordinates),\r\n//                     L.latLng(destinationCoordinates)\r\n//                 ],\r\n//                 routeWhileDragging: true,\r\n//                 lineOptions: {\r\n//                     styles: [{ color: 'red', opacity: 0.7, weight: 5 }]\r\n//                 },\r\n//                 createMarker: function () { return null; }\r\n//             });\r\n//             setRoutingControl(control.addTo(map));\r\n\r\n//             // Add marker for source and destination\r\n//             L.marker(sourceCoordinates).addTo(map)\r\n//                 .bindPopup(`<b>Source:</b> ${data.sourceStation}`);\r\n\r\n//             L.marker(destinationCoordinates).addTo(map)\r\n//                 .bindPopup(`<b>Destination:</b> ${data.destinationStation}`);\r\n\r\n//             // Initialize user icon marker\r\n//             const userIcon = L.icon({\r\n//                 iconUrl: data.photo,\r\n//                 iconSize: [40, 40],\r\n//             });\r\n//             setUserIconMarker(L.marker(sourceCoordinates, { icon: userIcon }).addTo(map));\r\n\r\n//             map.fitBounds([sourceCoordinates, destinationCoordinates]);\r\n//         }\r\n//     }, [sourceCoordinates, destinationCoordinates]);\r\n\r\n//     useEffect(() => {\r\n//         if (userIconMarker && routingControl ) {\r\n//             // Animate user icon marker along the route\r\n//             routingControl.on('routesfound', function (e) {\r\n//                 const route = e.routes[0];\r\n//                 const index = 0;\r\n//                 const segment = route.coordinates[index];\r\n//                 moveMarker(segment, index + 1, route);\r\n//             });\r\n//         }\r\n//     }, [userIconMarker, routingControl, sourceCoordinates, destinationCoordinates, ]);\r\n\r\n//     const displayCoordinates = async () => {\r\n        // if (userIconMarker) {\r\n        //     const coordinates = userIconMarker.getLatLng();\r\n        //     const response = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${coordinates.lat}&lon=${coordinates.lng}`);\r\n        //     const placeInfo = response.data.address;\r\n        //     const stateDistrict = placeInfo.state_district;\r\n            \r\n        //     try {\r\n        //         const userId = data._id;\r\n        //         await axios.post('http://localhost:5000/auth/submitalert', {\r\n        //             userId: userId,\r\n        //             coordinates: {\r\n        //                 stateDistrict: stateDistrict \r\n        //             },\r\n\r\n        //         });\r\n        //     } catch (error) {\r\n        //         console.error('Error saving SOS request:', error);\r\n        //     }\r\n\t\t// \tsetIsNavigated(true);\r\n        //     alert(`You are in ${stateDistrict}. Help will arrive in a few minutes.`);\r\n        //     navigate('/userhelp', { state: { data } });\r\n\r\n        // }\r\n//     };\r\n\r\n// \tlet destinationReached = false; \r\n\r\n//     async function moveMarker(segment, index, route) {\r\n//         setTimeout(async function () {\r\n//             if (!isNavigated) {\r\n//                 userIconMarker.setLatLng(L.latLng(segment.lat, segment.lng));\r\n//                 if (index < route.coordinates.length) {\r\n//                     moveMarker(route.coordinates[index], index + 1, route);\r\n//                 } else {\r\n//                     try {\r\n// \t\t\t\t\t\tif (!destinationReached) {\r\n// \t\t\t\t\t\t\ttoast.success(\"You have reached the destination successfully!\", {\r\n// \t\t\t\t\t\t\t\ttoastId: 'destinationToast',\r\n// \t\t\t\t\t\t\t\tonClose: async () => {\r\n// \t\t\t\t\t\t\t\t\tdestinationReached = true;\r\n// \t\t\t\t\t\t\t\t\ttry {\r\n// \t\t\t\t\t\t\t\t\t\tconst userId = data._id;\r\n// \t\t\t\t\t\t\t\t\t\tawait axios.post('http://localhost:5000/auth/submitstatus', {\r\n// \t\t\t\t\t\t\t\t\t\t\tuserId: userId,\r\n// \t\t\t\t\t\t\t\t\t\t\ttripStatus: 1\r\n// \t\t\t\t\t\t\t\t\t\t});\r\n// \t\t\t\t\t\t\t\t\t\tconsole.log(\"Navigating to '/userhistory'...\");\r\n// \t\t\t\t\t\t\t\t\t\tnavigate('/userhistory');\r\n// \t\t\t\t\t\t\t\t\t} catch (error) {\r\n// \t\t\t\t\t\t\t\t\t\tconsole.error(error);\r\n// \t\t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t\t\tdestinationReached = true;\r\n// \t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t});\r\n// \t\t\t\t\t\t}\r\n//                     } catch (error) {\r\n//                         console.error(error);\r\n//                     }                \r\n//                 }\r\n//             }\r\n//         }, 2); \r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Navbar />\r\n//             <div>\r\n//                 {error ? (\r\n//                     <div>Error: {error}</div>\r\n//                 ) : (\r\n//                     <div id=\"map\" style={{ width: '100%', height: '100vh' }}></div>\r\n//                 )}\r\n//             </div>\r\n//             <Sos displayCoordinates={displayCoordinates} />\r\n//             <ToastContainer />\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default MapComponent;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACQ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACN;AACM;AACA;;AAEA;AACR;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}